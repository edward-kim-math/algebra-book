<?xml version="1.0" encoding="UTF-8"?>
<exercises xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="exercises_seq_basics">
  <title>Additional Exercises</title>
  
  
  <exercise>
    <statement>
      <p>
        Consider the sequence <m>(a_n)_{n \ge 1}</m> that starts <m>1, 3, 5, 7, 9, \ldots</m> (i.e., the odd numbers in order).
        <ol>
          <li>
            <p>
              Give a recursive definition and closed formula for the sequence.
            </p>
          </li>
          <li>
            <p>
              Write out the sequence <m>(b_n)_{n \ge 2}</m> of partial sums of <m>(a_n)</m>.  Write down the recursive definition for <m>(b_n)</m> and guess at the closed formula. 
            </p>
          </li>
        </ol>
      </p>
    </statement>
    <solution>
      <p>
        <ol>
          <li>
            <p>
              The recursive definition is <m>a_n = a_{n-1} + 2</m> with <m>a_1 = 1</m>.  A closed formula is <m>a_n = 2n-1</m>.
            </p>
          </li>
          <li>
            <p>
              The sequence of partial sums is <m>1, 4, 9, 16, 25, 36, \ldots</m>.  A recursive definition is (as always) <m>b_n = b_{n-1} + a_n</m> which in this case is <m>b_n = b_{n-1} + 2n-1</m>.  It appears that the closed formula is <m>b_n = n^2</m>
            </p>
          </li>
        </ol>
      </p>
    </solution>
  </exercise>
  

  <exercise>
    <idx><h>Fibonacci sequence</h><h>partial sums</h></idx>
    <statement>
      <notation>
        <usage><m>F_n</m></usage>
        <description>the <m>n</m>th Fibonacci number</description>
      </notation>
      <p>
        The Fibonacci sequence is <m>0, 1, 1, 2, 3, 5, 8, 13, \ldots</m>
        (where <m>F_0 = 0</m>).
        <ol>

          <li>
            <p>
              Write out the first few terms of the sequence of partial sums:
              <m>0</m>, <m>0+1</m>, <m>0+1+1</m>,<ellipsis/>
            </p>
          </li>

          <li>
            <p>
              Guess a formula for the sequence of partial sums expressed in terms of a single Fibonacci number.  For example,
              you might say <m>F_0 + F_1 + \cdots + F_n = 3F_{n-1}^2 + n</m>,
              although that is definitely not correct.
	      <idx><h>sequence of partial sums</h><h>for Fibonacci sequence</h></idx>
            </p>
          </li>
        </ol>
      </p>
    </statement>
    <solution>
      <p>
        <ol>
          <li><m>0, 1, 2, 4, 7, 12, 20, \ldots</m>.</li>

          <li><m>F_0 + F_1 + \cdots + F_n = F_{n+2} - 1</m>.</li>
        </ol>
      </p>
    </solution>
  </exercise>

  <exercise>
    <statement>
      <p>
        Consider the three sequences below.
        For each, find a recursive definition.
        How are these sequences related?

        <ol>
          <li><m>2, 4, 6, 10, 16, 26, 42, \ldots</m>.</li>

          <li><m>5, 6, 11, 17, 28, 45, 73, \ldots</m>.</li>

          <li><m>0, 0 , 0 , 0 , 0 , 0 , 0 ,\ldots</m>.</li>
        </ol>
      </p>
    </statement>
    <solution>
      <p>
        The sequences all have the same recurrence relation:
        <m>a_n = a_{n-1} + a_{n-2}</m>
        (the same as the Fibonacci numbers).
        The only difference is the initial conditions.
      </p>
    </solution>
  </exercise>

  <exercise>
    <statement>
      <p>
        Write out the first few terms of the sequence given by <m>a_1 = 3</m>;
        <m>a_n = 2a_{n-1} + 4</m>.
        Then find a recursive definition for the sequence <m>10, 24, 52, 108, \ldots</m>.
      </p>
    </statement>
    <solution>
      <p>
        <m>3, 10, 24, 52, 108,\ldots</m>.
        The recursive definition for <m>10, 24, 52, \ldots</m> is
        <m>a_n = 2a_{n-1} + 4</m> with <m>a_1 = 10</m>.
      </p>
    </solution>
  </exercise>

  <exercise>
    <statement>
      <p>
        Write out the first few terms of the sequence given by <m>a_n = n^2 - 3n + 1</m>.
        Then find a closed formula for the sequence
        (starting with <m>a_1</m>)
        <m>0, 2, 6, 12, 20, \ldots</m>.
      </p>
    </statement>
    <solution>
      <p>
        <m>-1, -1, 1, 5, 11, 19,\ldots</m> Thus the sequence
        <m>0, 2, 6, 12, 20,\ldots</m> has closed formula <m>a_n = (n+1)^2 - 3(n+1) + 2</m>.
      </p>
    </solution>
  </exercise>

  <exercise>
    <statement>
      <p>
        Show that <m>a_n = 3\cdot 2^n + 7\cdot 5^n</m> is a solution to the recurrence relation <m>a_n = 7a_{n-1} - 10a_{n-2}</m>.
        What would the initial conditions need to be for this to be the closed formula for the sequence?
      </p>
    </statement>
    <solution>
      <p>
        This closed formula would have
        <m>a_{n-1} = 3\cdot 2^{n-1} + 7 \cdot 5^{n-1}</m> and <m>a_{n-2} = 3\cdot 2^{n-2} + 7 \cdot 5^{n-2}</m>.
        Then we would have
        <md>
          <mrow>7a_{n-1} - 10a_{n-2} = \amp 7(3\cdot 2^{n-1} + 7 \cdot 5^{n-1}) - 10(3\cdot 2^{n-2} + 7 \cdot 5^{n-2})</mrow>
          <mrow>= \amp 21\cdot 2^{n-1} + 49 \cdot 5^{n-1} - 30\cdot 2^{n-2} - 70 \cdot 5^{n-2})</mrow>
          <mrow>= \amp 21\cdot 2^{n-1} + 49 \cdot 5^{n-1} - 15\cdot 2^{n-1} - 14 \cdot 5^{n-1})</mrow>
          <mrow>= \amp 6\cdot 2^{n-1} + 35 \cdot 5^{n-1}</mrow>
          <mrow>= \amp 3\cdot 2^{n} + 7 \cdot 5^{n} = a_n</mrow>
        </md>.
        So the closed formula agrees with the recurrence relation.
        The closed formula has initial terms <m>a_0 = 10</m> and <m>a_1 = 41</m>.
      </p>
    </solution>
  </exercise>
  
  <exercise>
    <statement>
      <p>
        Show that <m>a_n = 2^n - 5^n</m> is also a solution to the recurrence relation <m>a_n = 7a_{n-1} - 10a_{n-2}</m>.
        What would the initial conditions need to be for this to be the closed formula for the sequence?
      </p>
    </statement>
  </exercise>

  <exercise>
    <statement>
      <p>
        Find a closed formula for the sequence with recursive definition
        <m>a_n = 2a_{n-1} - a_{n-2}</m> with <m>a_1 = 1</m> and <m>a_2 = 2</m>.
      </p>
    </statement>
    <hint>
      <p>
        You will want to write out the sequence, guess a closed formula, and then verify that you are correct.
      </p>
    </hint>
    
  </exercise>

  <exercise>
    <statement>
      <p>
        Give two different recursive definitions for the sequence with closed formula <m>a_n = 3 + 2n</m>.  Prove you are correct.
        At least one of the recursive definitions should make use of two previous terms and no constants.
      </p>
    </statement>
    <hint>
      <p>
        Write out the sequence, guess a recursive definition, and verify that the closed formula is a solution to that recursive definition.
      </p>
    </hint>
    
  </exercise>
  
  <exercise>
    <idx><h>summation notation</h></idx>
    <idx><h>product notation</h></idx>
    <statement>
      <p>
        Use summation (<m>\sum</m>) or product (<m>\prod</m>) notation to rewrite the following.

        <ol cols="2">
          <li><m>2 + 4 + 6 + 8 + \cdots + 2n</m>.</li>

          <li><m>1 + 5 + 9 + 13 + \cdots + 425</m>.</li>

          <li>
            <m>1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \cdots + \frac{1}{50}</m>.
          </li>

          <li><m>2 \cdot 4 \cdot 6 \cdot \cdots \cdot 2n</m>.</li>

          <li>
            <m>(\frac{1}{2})(\frac{2}{3})(\frac{3}{4})\cdots(\frac{100}{101})</m>.
          </li>
        </ol>
      </p>
    </statement>
    <solution>
      <p>
        <ol cols="2">
          <li><m>\d\sum_{k=1}^n 2k</m>.</li>

          <li><m>\d\sum_{k=1}^{107} (1 + 4(k-1))</m>.</li>

          <li><m>\d\sum_{k=1}^{50} \frac{1}{k}</m>.</li>

          <li><m>\d\prod_{k=1}^n 2k</m>.</li>

          <li><m>\d\prod_{k=1}^{100} \frac{k}{k+1}</m>.</li>
        </ol>
      </p>
    </solution>
  </exercise>

  <exercise>
    <idx><h>summation notation</h></idx>
    <idx><h>product notation</h></idx>
    <statement>
      <p>
        Expand the following sums and products.
        That is, write them out the long way.

        <ol cols="2">
          <li><m>\d\sum_{k=1}^{100} (3+4k)</m>.</li>

          <li><m>\d\sum_{k=0}^n 2^k</m>.</li>

          <li><m>\d\sum_{k=2}^{50}\frac{1}{(k^2 - 1)}</m>.</li>

          <li><m>\d\prod_{k=2}^{100}\frac{k^2}{(k^2-1)}</m>.</li>

          <li><m>\d\prod_{k=0}^n (2+3k)</m>.</li>
        </ol>
      </p>
    </statement>
    <solution>
      <p>
        <ol>
          <li>
            <m>\d\sum_{k=1}^{100} (3+4k) = 7 + 11 + 15 + \cdots + 403</m>.
          </li>

          <li>
            <m>\d\sum_{k=0}^n 2^k = 1 + 2 + 4 + 8 + \cdots + 2^n</m>.
          </li>

          <li>
            <m>\d\sum_{k=2}^{50}\frac{1}{(k^2 - 1)} = 1 + \frac{1}{3} + \frac{1}{8} + \frac{1}{15} + \cdots + \frac{1}{2499}</m>.
          </li>

          <li>
            <m>\d\prod_{k=2}^{100}\frac{k^2}{(k^2-1)} = \frac{4}{3}\cdot\frac{9}{8}\cdot\frac{16}{15}\cdots\frac{10000}{9999}</m>.
          </li>

          <li>
            <m>\d\prod_{k=0}^n (2+3k) = (2)(5)(8)(11)(14)\cdots(2+3n)</m>.
          </li>
        </ol>
      </p>
    </solution>
  </exercise>
  
  <!-- Inspired by AC -->
  <exercise>
    <statement>
      <p>
        Suppose you draw <m>n</m> lines in the plane so that every pair of lines cross (no lines are parallel) and no three lines cross at the same point.  This will create some number of regions in the plane, including some unbounded regions.  Call the number of regions <m>R_n</m>.  Find a recursive formula for the number of regions created by <m>n</m> lines, and justify why your recursion is correct.
      </p>
    </statement>
    <hint>
      <p>
        Try an example: When you draw the 4th line, it will cross three other lines and so will be divided into four segments, two of which are infinite.  Each segment will divide a previous region into two.
      </p>
    </hint>
  </exercise>
  
  <!-- From AC -->
  <exercise>
    <idx><h>string</h><h>ternary</h></idx>
    <idx><h>ternary string</h></idx>
    <statement>
      <p>
        A <term>ternary</term> string is a sequence of 0's, 1's, and 2's.  Just like a bit string, but with three symbols.  
      </p>
      
      <p>
        Let's call a ternary string <em>good</em> provided it never contains a 2 followed immediately by a 0.  Let <m>G_n</m> be the number of good strings of length <m>n</m>.  For example, <m>G_1 = 3</m>, and <m>G_2 = 8</m> (since of the 9 ternary strings of length 2, only one is not good).
      </p>
      
      <p>
        Find, with justification, a recursive formula for <m>G_n</m>, and use it to compute <m>G_5</m>.
      </p>
    </statement>
    <hint>
      <p>
        Consider three cases: The last digit is a 0, a 1, or a 2.  Two of these should be easy to count, but strings ending in 0 cannot be proceeded by a 2, so they require a little more work.
      </p>
    </hint>
  </exercise>

  <exercise>
    <idx>bit string</idx>
    <statement>
      <p>
        Consider bit strings with length <m>l</m> and weight <m>k</m>
        (so strings of <m>l</m> 0's and 1's, including <m>k</m> 1's).
        We know how to count the number of these for a fixed <m>l</m> and <m>k</m>.
        Now, we will count the number of strings for which the <em>sum</em>
        of the length and the weight is fixed.
        For example,
        let's count all the bit strings for which <m>l+k = 11</m>.

        <ol>
          <li>
            <p>
              Find examples of these strings of different lengths.
              What is the longest string possible?
              What is the shortest?
            </p>
          </li>

          <li>
            <p>
              How many strings are there of each of these lengths.
              Use this to count the total number of strings
              (with sum 11).
            </p>
          </li>

          <li>
            <p>
              The other approach: Let <m>n = l+k</m> vary.
              How many strings have sum <m>n = 1</m>?
              How many have sum <m>n = 2</m>?
              And so on.
              Find and explain a recurrence relation for the sequence <m>(a_n)</m> that gives the number of strings with sum <m>n</m>.
            </p>
          </li>

          <li>
            <p>
              Describe what you have found above in terms of <xref ref="fig-pascal-large" text="custom">Pascal's triangle</xref>.
              What pattern have you discovered?<idx><h>Pascal's triangle</h></idx>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>

  


  <exercise>
    <statement>
      <p>
        When bees play chess,
        they use a hexagonal board like the one shown below.
        The queen bee can move one space at a time either directly to the right or angled up-right or down-right
        (but can never move leftwards).
        How many different paths can the queen take from the top left hexagon to the bottom right hexagon?
        Explain your answer, and how this relates to the previous question.
        (As an example,
        there are three paths to get to the second hexagon on the bottom row.)
      </p>

      <sidebyside width="70%">

        <image xml:id="bee-chess">
            <shortdescription>A grid of two rows of hexagons, 6 in each row, the top row slightly to the left of the bottom row.  The top-left cell is labeled "start"; the bottom right is labeled "stop." The cell second to the left on the bottom row contains a "3"</shortdescription>
            <latex-image>
              \def\r{1}
              \newcommand{\hexagon}[3]{
                \def\x{-cos{30}*\r*#1+cos{30}*#2*\r*2}
                \def\y{-\r*#1-sin{30}*\r*#1}
                \draw[thick] (\x,\y) +(90:\r) -- +(30:\r) -- +(-30:\r) -- +(-90:\r) -- +(-150:\r) -- +(150:\r) -- cycle;
                \draw (\x,\y) node{#3};
              }
              \begin{tikzpicture}[scale=.75]
              \hexagon{1}{0}{\tiny start};
              \hexagon{2}{2}{3}
              \foreach \i in {1,...,5} {
                \foreach \j in {1,2} {
                  \hexagon{\j}{\i}{};
                }
              }
              \hexagon{2}{6}{\tiny stop};
              \end{tikzpicture}
            </latex-image>
        </image>

      </sidebyside>
    </statement>
    <hint>
      <p>
        Think recursively, like you did in Pascal's triangle.
      </p>
    </hint>
  </exercise>


<!-- From AC: -->
<exercise>
  <idx><h>chessboard</h><h>tiling</h></idx>
  <idx><h>domino</h></idx>
    <statement>
      <p>
        Let <m>t_n</m> denote the number of ways to tile a <m>2\times n</m> chessboard using <m>1\times 2</m> dominoes.  Write out the first few terms of the sequence <m>(t_n)_{n \ge 1}</m>, and then give a recursive definition.  Explain why your recursive formula is correct. 
      </p>
    </statement>
    <hint>
      <p>
        There is only one way to tile a <m>2 \times 1</m> board, and two ways to tile a <m>2\times 2</m> board (you can orient the dominoes in two ways).  In general, consider the two ways the domino covering the top left corner could be oriented.
      </p>
    </hint>
  </exercise>


</exercises>
