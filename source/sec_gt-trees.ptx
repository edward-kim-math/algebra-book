<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_trees">
  <title>Trees</title>

  <objectives>
		<introduction>
			<p>
				After completing this section, you should be able to do the following.
			</p>
		</introduction>
		<ol>
			<li>
				<p>
          Prove basic facts about trees.
				</p>
			</li>

			<li>
				<p>
          Use theorems about trees to solve problems.
				</p>
			</li> 
			<li>
				<p>
          Identify and construct spanning trees.
				</p>
			</li>
		</ol>
	</objectives>

  <subsection>
    <title>Section Preview</title>
    
    
    <investigation>
      <p>
        Consider the graph drawn below.
      </p>
      
      <sidebyside width="30%">
        <image>
          <latex-image>
            \begin{tikzpicture}[scale=0.9]
              \draw (-1,0) \v -- (1,0) \v -- (1,2) \v -- (-1, 2) \v -- (-1,0) -- (1,2) (-1,2) -- (1,0) (0,1) \v;
              \draw (-1,0) -- (-2,1) \v -- (-1,2) (1,2) -- (2,1) \v -- (1,0);
            \end{tikzpicture}
          </latex-image>
          <description>
            A graph with seven vertices arranged in three rows: two on top, three in the middle, and two on bottom.  The four vertices on top and bottom have edges forming a square.  The vertex in the middle of the middle row is adjacent to the four vertices on top and bottom.  The vertices on the left and right of the middle row are adjacent to the top and bottom vertices closest to them.
          </description>
        </image>
      </sidebyside>
      <p>
        <ol>
          <li>
            <p>
              Find a subgraph with the smallest number of edges that is still connected and contains all the vertices.
            </p>
          </li>
          <li>
            <p>
              Find a subgraph with the largest number of edges that doesn't contain any cycles.
            </p>
          </li>
          <li>
            <p>
              What do you notice about the number of edges in your examples above?  Is this a coincidence?
            </p>
          </li>
        </ol>  
      </p>
    </investigation>
    <p>
      One very useful and common approach to studying graph theory is to restrict your focus to graphs of a particular kind.
      For example,
      you could try to really understand just complete graphs or just bipartite graphs,
      instead of trying to understand all graphs in general.
      That is what we are going to do now,
      looking at <em>trees</em>.
      Hopefully by the end of this section we will have a better understanding of this class of graph,
      and also understand why it is important enough to warrant its own section.
    </p>

    <definition>
      <title>Trees and Forests</title>
      <idx><h>tree</h></idx>
      <idx><h>forest</h></idx>
      <statement>
      <p>
        A <term>tree</term> is a connected graph containing no cycles.<fn>
        Sometimes this is stated as <q>a tree is an acyclic connected graph;</q> <q>acyclic</q>
        is just a fancy word for <q>containing no cycles.</q>
        </fn>
      </p>
      
      <p>
        A <term>forest</term> is a graph containing no cycles.   Note that this means that a connected forest is a tree.
      </p>
      </statement>
    </definition>

    <p>
      Does the definition above agree with your intuition for what graphs we should call trees?
      Try thinking of examples of trees, and make sure they satisfy the definition.
      One thing to keep in mind is that while the trees we study in graph theory are related to trees you might see in other subjects,
      the correspondence is not exact.
      For instance, in anthropology,
      you might study family trees, like the one below,
    </p>

    <sidebyside width="70%">

      <image xml:id="family-tree">

      <latex-image>
        \begin{tikzpicture}[level 1/.style={sibling distance=20em},level 2/.style={sibling distance=7em},
          every node/.style = {shape=rectangle, rounded corners,
            draw, align=center,
            top color=white, bottom color=white}]]
          \node {Me}
            child { node {Mom} 
              child { node {\footnotesize Maternal\\Grandma}}
              child { node {\footnotesize Maternal\\Grandpa}}}
            child { node {Dad}
              child { node {\footnotesize Paternal\\Grandma}}
              child { node {\footnotesize Paternal\\Grandpa} } };
        \end{tikzpicture}
      </latex-image>
      <description>
        A family tree with "Me" at the top, branching down to the left to "Mom" and to the right to "Dad".  "Mom" has branches leading down to "Maternal Grandma" and "Maternal Grandpa".  "Dad" has branches down to "Paternal Grandma" and "Paternal Grandpa".
      </description>
      </image>

    </sidebyside>

    <p>
      So far so good,
      but while your grandparents are (probably) not blood relatives,
      if we go back far enough,
      it is likely that they did have
      <em>some</em> common ancestor.
      If you trace the tree back from you to that common ancestor,
      then down through your other grandparent,
      you would have a cycle, and thus the graph would not be a tree.
    </p>

    <p>
      You might also have seen something called a
      <em>decision tree</em>
      (such as the algorithm for deciding whether a series converges or diverges).
      Sometimes these too contain cycles,
      as the decision for one node might lead you back to a previous step.
    </p>

    <p>
      <idx><h>tree</h><h>rooted</h></idx>
      <idx><h>rooted tree</h></idx>
      Both the examples of trees above also have another feature worth mentioning:
      There is a clear order to the vertices in the tree.
      The definition of a tree does not include this added structure,
      although we can impose such a structure by considering
      <term>rooted trees</term>,
      where we simply designate one vertex as the <em>root</em>.
      We will consider such trees in more detail later in this section.
    </p>

    <p>
      In this section, we will explore some basic properties of trees, which will serve as an excellent introduction to writing proofs about graphs.  We will also consider a special kind of tree, called a <term>spanning tree</term>, which is a tree that includes all the vertices of a connected graph. Finally, we will briefly consider rooted trees.
    </p>

    <worksheet xml:id="PA-gt-trees">
      <title>Preview Activity</title>
      
      <exercise label="pa-gt-trees-1">
        <webwork>
          <pg-code>
            $tree = RadioButtons([
            "Yes, since the graph is connected and contains no cycles",
            "No, the graph contains a cycle",
            "No, the graph is not connected",
            "No, the graph is not connected and contains a cycle"
            ], 0);
            </pg-code>
          <introduction>
            <p>
              Take out a piece of paper and draw 8 vertices in a circle.
            </p>
            <image width="20%">
              <shortdescription>8 vertices in a circle with no edges</shortdescription>
              <latex-image>
                \begin{tikzpicture}
                  \foreach \x in {1,...,8}
                    \draw (360/8*\x:2) \v;
                \end{tikzpicture}
              </latex-image>
            </image>
            <p>
              We are going to add edges to this graph following some requirements.
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                First, add the fewest number of edges possible so that the resulting graph is connected.  That is, there must be a path between any pair of vertices (a path can use more than one edge, of course).
              </p>
              <p>
                How many edges are in the graph you drew?  <var name="7" width="5" component="interactive"/>
              </p>
            </statement>
          </task>
          <task>
            <statement>
              <p>
                Was the resulting graph you found a tree?
              </p>
              <p component="interactive"><var name="$tree" form="buttons"/></p>
            </statement>
          </task>
          <task>
            <statement>
              <p>
                Now start over with an empty graph again.  This time, add the largest number of edges possible so that the resulting graph contains no cycles.
              </p>
              <p>
                How many edges are in the graph you drew?  <var name="7" width="5" component="interactive"/>
              </p>
            </statement>
          </task>
          <task>
            <statement>
              <p>
                Was the resulting graph you found a tree?
              </p>
              <p component="interactive"><var name="$tree" form="buttons"/></p>
            </statement>
            </task>
        </webwork>
      </exercise>
    </worksheet>
  </subsection>

  <subsection>
    <title>Properties of Trees</title>
    <p>
      We wish to really understand trees.
      This means we should discover properties of trees:
      what makes them special and what is special about them.
    </p>

    <p>
      A tree is a connected graph with no cycles.
      Is there anything else we can say?
      It would be nice to have other equivalent conditions for a graph to be a tree.
      That is, we would like to know whether there are any graph theoretic properties that all trees have,
      and perhaps even that <em>only</em> trees have.
    </p>

    <p>
      To get a feel for the sorts of things we can say, we will consider three <em>propositions</em> about trees.  These will also illustrate important proof techniques that apply to graphs in general, and happen to be a little easier for trees.
    </p>
    
    <p>
      Our first proposition gives an alternate definition for a tree.  That is, it gives necessary and sufficient conditions for a graph to be a tree.
    </p>
    
    <proposition xml:id="prop-unique-paths-trees">
      <statement>
        <p>
          A graph <m>T</m> is a tree if and only if between every pair of distinct vertices of <m>T</m> there is a unique path.
        </p>
      </statement>
      
      <proof>
        <p>
          This is an <q>if and only if</q> statement, so we must prove two implications.  We start by proving that if <m>T</m> is a tree, then between every pair of distinct vertices there is a unique path.
        </p>
        
        <p>
          Assume <m>T</m> is a tree, and let <m>u</m> and <m>v</m> be distinct vertices (if <m>T</m> only has one vertex, then the conclusion is satisfied automatically).  We must show two things to show that there is a unique path between <m>u</m> and <m>v</m>: that there is a path, and that there is not more than one path.  The first of these is automatic; since <m>T</m> is a tree, it is connected, so there is a path between any pair of vertices.  
        </p>
        
        <p>
          To show the path is unique, we suppose there are two paths between <m>u</m> and <m>v</m>, and get a contradiction.  The two paths might start out the same, but since they are different, there is some first vertex <m>u'</m> after which the two paths diverge.  However, since the two paths both end at <m>v</m>, there is some first vertex after <m>u'</m> that they have in common, call it <m>v'</m>.  Now consider the two paths from <m>u'</m> to <m>v'</m>.  Taken together, these form a cycle, which contradicts our assumption that <m>T</m> is a tree.
        </p>
        
        <p>
          Now we consider the converse: If between every pair of distinct vertices of <m>T</m> there is a unique path, then <m>T</m> is a tree.  So assume the hypothesis: Between every pair of distinct vertices of <m>T</m> there is a unique path.  To prove that <m>T</m> is a tree, we must show it is connected and contains no cycles.
        </p>
        
        <p>
          The first half of this is easy: <m>T</m> is connected, because there is a path between every pair of vertices.  To show that <m>T</m> has no cycles, we assume it does, for the sake of contradiction.  Let <m>u</m> and <m>v</m> be two distinct vertices in a cycle of <m>T</m>.  Since we can get from <m>u</m> to <m>v</m> by going clockwise or counterclockwise around the cycle, there are two paths from <m>u</m> and <m>v</m>, contradicting our assumption.
        </p>
        
        <p>
          We have established both directions so we have completed the proof.
        </p>
      </proof>
    </proposition>
    
    <p>
      Read the proof above very carefully.  Notice that both directions had two parts: the existence of paths, and the uniqueness of paths (which related to the fact that there were no cycles).  In this case, these two parts were really separate.  In fact, if we just considered graphs with no cycles (a forest), then we could still do the parts of the proof that explore the uniqueness of paths between vertices, even if there might not <em>exist</em> paths between vertices.
    </p>
    
    <p>
      This observation allows us to state the following <em>corollary</em>.<fn>A corollary is another sort of provable statement, like a proposition or theorem, but one that follows direction from another already established statement, or its proof.</fn>
    </p>
    
    <corollary xml:id="cor-unique-paths-forests">
      <statement>
        <p>
          A graph <m>F</m> is a forest if and only if between any pair of vertices in <m>F</m> there is at most one path.
        </p>
      </statement>
    </corollary>
    
    <p>
      We do not give a proof of the corollary (it is, after all, supposed to follow directly from the proposition), but for practice, you are asked to give a careful proof in the exercises.  When you do so, try to use proof by contrapositive instead of proof by contradiction.
    </p>
    
    <p>
    <idx><h>leaf</h></idx>
      Our second proposition tells us that all trees have <term>leaves</term>: vertices of degree one.
    </p>
    
    <proposition xml:id="prop-leaves-in-trees">
      <statement>
        <p>
          Any tree with at least two vertices has at least two vertices of degree one.
        </p>
      </statement>
      <proof>
        <p>
          We give a proof by contradiction.  Let <m>T</m> be a tree with at least two vertices, and suppose, contrary to stipulation, that there are not two vertices of degree one.  
        </p>
        
        <p>
          Let <m>P</m> be a path in <m>T</m> of longest possible length.  Let <m>u</m> and <m>v</m> be the endpoints of the path.  Since <m>T</m> does not have two vertices of degree one, at least one of these must have degree two or higher.  Say that it is <m>u</m>.  We know that <m>u</m> is adjacent to a vertex in the path <m>P</m>, but now it must also be adjacent to another vertex, call it <m>u'</m>.  
        </p>
        
        <p>
          Where is <m>u'</m>?  It cannot be a vertex of <m>P</m>, because if it was, there would be two distinct paths from <m>u</m> to <m>u'</m>: the edge between them, and the first part of <m>P</m> (up to <m>u'</m>).  But <m>u'</m> also cannot be outside of <m>P</m>, for if it was, there would be a path from <m>u'</m> to <m>v</m> that was longer than <m>P</m>, which has the longest possible length.  
        </p>
        
        <p>
          This contradiction proves that there must be at least two vertices of degree one.  In fact, we can say a little more: <m>u</m> and <m>v</m> must <em>both</em> have degree one.  
        </p>
      </proof>
    </proposition>

    <p>
      The proposition is quite useful when proving statements about trees, because we often prove statements about trees by <term>induction</term>.  This is a proof technique that we investigate fully in <xref ref="sec_seq-induction"/>, but for now, all we need to understand is that it is useful to compare a given tree to smaller trees. To show something is true of a tree with <m>v</m> vertices, we will assume the thing is true of all trees with <m>v-1</m> vertices.  By removing a vertex of degree 1, we get this smaller tree, and then we just need to show that putting the vertex back doesn't mess us up.
    </p>
    
    <!-- <p>
      For just a moment, don't worry about whether this sort of reasoning is valid.  Let's look at an example of such a proof, and then we will examine the logic to convince ourselves we are okay.
    </p> -->

    <p>
      Is there a tree with exactly 7 vertices and 7 edges?  Try to draw one.  Could a tree with 7 vertices have only 5 edges?  There is a good reason that these seem impossible to draw.
    </p>
    
    <proposition xml:id="prop-tree-edge-vertex">
      <idx><h>tree</h><h>number of edges and vertices</h></idx>
      <statement>
        <p>
          Let <m>T</m> be a tree with <m>v</m> vertices and <m>e</m> edges.  Then <m>e = v-1</m>. 
        </p>
      </statement>
    </proposition>
      <p>
        We will prove that this proposition is true for all possible values of <m>v \ge 1</m>.   Note that if <m>v = 1</m>, then the tree must have <m>0</m> edges, so yes, <m>e = v-1</m>.  We could then look at trees with <m>v=2</m> vertices (there is only one, and it has <m>e = 1 = v-1</m> edges) and then all trees with <m>v=3</m> vertices, and then <m>v=4</m>, and so on, but that would take forever.  Literally!
      </p>

      <p>
        <idx><h>minimal criminal</h></idx>
        Instead, we will do a version of <em>proof by contradiction</em> called the <term>minimal criminal</term>.  We will assume the proposition is not true (just like we would start any proof by contradiction).  This means that there is some <em>smallest</em> tree for which it isn't true.  If this smallest counterexample (i.e., minimal criminal) has <m>v</m> vertices, then we are guaranteed that <em>all</em> trees with <m>v-1</m> vertices are <em>not</em> counterexamples.  Let's see how this works out.
      </p>
      <proof>
        
        <p>
          Suppose, for the sake of contradiction, that the proposition is not true for all trees.  Let <m>T</m> be a tree for which the proposition is not true, with the smallest number of vertices among all the counterexamples.  Let <m>v</m> be the number of vertices of <m>T</m>.
        </p>

        <p>
          Since the only tree with one vertex has zero edges, that cannot be our tree <m>T</m>, so we can assume <m>v \ge 2</m>.  In particular, we know by <xref ref="prop-leaves-in-trees" /> that <m>T</m> must contain at least one vertex of degree 1, call it <m>v_0</m>.
      </p>
        
        <p>
          Let <m>T'</m> be the tree resulting from removing <m>v_0</m> from <m>T</m> (together with its incident edge).  Since we removed a leaf, <m>T'</m> is still a tree (the unique paths between pairs of vertices in <m>T'</m> are the same as the unique paths between them in <m>T</m>). 
        </p>
        
        <p>
          Now <m>T'</m> has <m>v-1</m> vertices.  Since <m>T</m> was the smallest tree for which the proposition isn't true, we know that the proposition is true for <m>T'</m>. So <m>T'</m> must have one fewer edges than vertices; that is, <m>T'</m> has <m>v-2</m> edges.  But <m>T</m> has one more edge than <m>T'</m>, so it has <m>v-1</m> edges.  This contradicts our assumption that <m>T</m> does not satisfy the proposition, which completes our proof.
        </p>
      </proof>


      <!-- TODO: add something more about the style of proof. -->
  </subsection>




  <subsection>
    <title>Spanning Trees</title>
    <idx><h>spanning tree</h></idx>
    <idx><h>tree</h><h>spanning</h></idx>
    <p>
      One of the advantages of trees is that they give us a few simple ways to travel through the vertices.  If a connected graph is not a tree, then we can still use these traversal algorithms if we identify a subgraph that <em>is</em> a tree.
    </p>
    
    <p>
      First we should consider if this even makes sense.  Given any connected graph <m>G</m>, will there always be a subgraph that is a tree?  Well, that is actually too easy: You could just take a single vertex of <m>G</m>.  If we want to use this subgraph to tell us how to visit all vertices, then we want our subgraph to include all of the vertices.  We call such a tree a <term>spanning tree</term>.  
    </p>
    
    <definition xml:id="definition-spanningtree">
    <idx>
      <h>spanning tree</h>
    </idx>
    <idx>
      <h>tree</h>
      <h>spanning</h>
    </idx>
      <statement>
      <p>
        Given a connected graph <m>G</m>, a <term>spanning tree</term> of <m>G</m> is a subgraph of <m>G</m> which is a tree and includes all the vertices of <m>G</m>. 
      </p>
      </statement>
    </definition>
    
    <p>
      It turns out that every connected graph has one (and usually many).
    </p>

    <theorem xml:id="thm-spanning-tree">
      <statement>
        <p>
            Every connected graph has a spanning tree.
        </p>
      </statement>
    </theorem>
    

    <p>
      How do we know?  We can give an algorithm for <em>finding</em> a spanning tree!  Start with a connected graph <m>G</m>.  If there is no cycle, then <m>G</m> is already a tree and we are done.  If there is a cycle, let <m>e</m> be any edge in that cycle and consider the new graph <m>G_1 = G - e</m> (i.e., the graph you get by deleting <m>e</m>).  This tree is still connected: Since <m>e</m> belonged to a cycle, there were at least two paths between its incident vertices.  Now repeat: If <m>G_1</m> has no cycles, we are done; otherwise define <m>G_2</m> to be <m>G_1 - e_1</m>, where <m>e_1</m> is an edge in a cycle in <m>G_1</m>.  Keep going.  This process must eventually stop, since there are only a finite number of edges to remove.  The result will be a tree, and since we never removed any vertex, a <em>spanning</em> tree.
    </p>
    
    <p>
      This is by no means the only algorithm for finding a spanning tree.  You could have started with the empty graph and added edges that belong to <m>G</m>, as long as adding them would not create a cycle.  You have some choices as to which edges you add first: You could always add an edge adjacent to edges you have already added (after the first one, of course), or add them using some other order.  Which spanning tree you end up with depends on these choices.
    </p>
    
    <example>
      <statement>
        <p>
          Find two different spanning trees of the graph,
        </p>
        <sidebyside width="35%">
          <image xml:id="gt-trees-spanning-q">
            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw (-1,0) \v -- (1,0)\v -- (1,2) \v -- (-1, 2) \v -- (-1,0) -- (1,2) (-1,2) -- (1,0) (0,1) \v;
                \draw (-1,0) -- (-2,1) \v -- (-1,2) (1,2) -- (2,1) \v -- (1,0);
              \end{tikzpicture}
            </latex-image>
            <description>
              A graph with seven vertices arranged in three rows: two on top, three in the middle, and two on bottom.  The four vertices on top and bottom have edges forming a square.  The vertex in the middle of the middle row is adjacent to the four vertices on top and bottom.  The vertices on the left and right of the middle row are adjacent to the top and bottom vertices closest to them.
          </description>
          </image>
        </sidebyside>
      </statement>
      <solution>
        <p>
          Here are two spanning trees.  
        </p>
        
        <sidebyside widths="30% 30%">
          <image xml:id="gt-trees-spanning1">
            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw (-1,0) \v -- (1,0)\v (1,2) \v -- (-1, 2) \v  (-1,0)  (-1,2) -- (0,1) \v;
                \draw (-1,0) (-2,1) \v -- (-1,2) (1,2) -- (2,1) \v -- (1,0);
              \end{tikzpicture}
            </latex-image>
            <description>
              A graph with seven vertices arranged in three rows: two on top, three in the middle, and two on bottom.  The vertex on the middle left is adjacent to the vertex on the top left.  This is adjacent to the vertex in the middle of the middle row, and the vertex on the top right.  The top right vertex is adjacent to the middle right, which is adjacent to the vertex on the bottom right, which is adjacent to the vertex on the bottom left.  Thus there are a total of 6 edges.
            </description>
          </image>
          
          <image xml:id="gt-trees-spanning2">
            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw (-1,0) \v  (1,0)\v  (1,2) \v (-1, 2) \v  (-1,0) -- (1,2) (-1,2) -- (1,0) (0,1) \v;
                \draw (-2,1) \v -- (-1,2) (1,2) -- (2,1) \v;
              \end{tikzpicture}
            </latex-image>
            <description>
              A graph with seven vertices arranged in three rows: two on top, three in the middle, and two on bottom.  The vertex in the middle of the middle row is adjacent to the four vertices on the top and bottom rows.  The vertices on the top row are each adjacent to the vertices in the middle row on their side. Thus there are a total of 6 edges.
            </description>
          </image>
        </sidebyside>
      </solution>
    </example>
    
    <p>
    <idx>
      <h>spanning tree</h><h>minimum</h>
    </idx>
    <idx>
      <h>minimum spanning tree</h>
    </idx>

      Although we will not consider this in detail, these algorithms are usually applied to <em>weighted</em> graphs.  Here every edge has some weight or cost assigned to it.  The goal is to find a spanning tree that has the smallest possible combined weight.  Such a tree is called a <term>minimum spanning tree</term>.  Finding the minimum spanning tree uses basically the same algorithms as we described above, but when picking an edge to add, you always pick the smallest (or when removing an edge, you always remove the largest).<fn>
      <idx>
        <h>Prim's algorithm</h>
      </idx>
      <idx>
        <h>Kruskal's algorithm</h>
      </idx>
      If you add the smallest edge adjacent to edges you have already added, you are doing <em>Prim's algorithm</em>.  If you add the smallest edge in the entire graph, you are following <em>Kruskal's algorithm</em>.</fn>
    </p>
    
    
    

  </subsection>
  <subsection xml:id="subsec-rooted-trees">
    <title>Rooted Trees</title>
    <idx><h>rooted tree</h></idx>
    <idx><h>tree</h><h>rooted</h></idx>
    <p>
      So far, we have thought of trees only as a particular kind of graph.
      However, it is often useful to add additional structure to trees to help solve problems.
      Data is often structured like a tree.
      This book, for example, has a tree structure:
      Draw a vertex for the book itself.
      Then draw vertices for each chapter,
      connected to the book vertex.
      Under each chapter, draw a vertex for each section,
      connecting it to the chapter it belongs to.
      The graph will not have any cycles; it will be a tree, but a tree with a clear hierarchy which is not present if we don't identify the <q>book vertex</q> as the <q>top</q>.
    </p>
    
    <p>
      <idx><h>root (in a tree)</h></idx>
      As soon as one vertex of a tree is designated as the <term>root</term>, then every other vertex on the tree can be characterized by its position relative to the root.  This works because there is a unique path between any two vertices in a tree.  So from any vertex, we can travel back to the root in exactly one way.  This also allows us to describe how distinct vertices in a rooted tree are related.
    </p>
    
    <p>
      <idx><h>parent (in a rooted tree)</h></idx>
      <idx><h>child (in a rooted tree)</h></idx>
      If two vertices are adjacent, then we say one of them is the <term>parent</term> of the other, which is called the <term>child</term> of the parent.  Of the two, the parent is the vertex that is closer to the root.  Thus the root of a tree is a parent, but is not the child of any vertex (and is unique in this respect: All non-root vertices have <em>exactly one</em> parent).  
    </p>
    
    <p>
      <idx><h>descendant (in a rooted tree)</h></idx>
      <idx><h>ancestor (in a rooted tree)</h></idx>
      Not surprisingly, the child of a child of a vertex is called the <term>grandchild</term> of the vertex (and it is the <term>grandparent</term>).  More generally, we say that a vertex <m>v</m> is a <term>descendent</term> of a vertex <m>u</m> provided <m>u</m> is a vertex on the path from <m>v</m> to the root.  Then we would call <m>u</m> an <term>ancestor</term> of <m>v</m>.
    </p>
    
    <p>
      <idx><h>sibling (in a rooted tree)</h></idx>
      For most trees (in fact, all except paths with one end the root), there will be pairs of vertices neither of which is a descendant of the other.  We might call these cousins or siblings.  In fact, vertices <m>u</m> and <m>v</m> are called <term>siblings</term> provided they have the same parent.  Note that siblings are never adjacent (do you see why?).
    </p>
    
    <example>
      <statement>
        <p>
          Consider the tree below.
        </p>
        
        <sidebyside width="35%">
          <image xml:id="img-labeled-tree">
            <latex-image>
              \begin{tikzpicture}
                {\footnotesize
                  \coordinate (a) at (0,0);
                  \coordinate (b) at (1,1);
                  \coordinate (c) at (1,0);
                  \coordinate (d) at (1,-1);
                  \coordinate (e) at (2,0);
                  \coordinate (f) at (3,1);
                  \coordinate (g) at (3,-1);
                  \coordinate (h) at (4,1);
                  \coordinate (i) at (4,0);
                  \draw (a) -- (c) -- (e) -- (g) (b) -- (e) (d) -- (e) -- (f) -- (h) (f) -- (i);
                  \foreach \x in {a,...,i}{
                  \draw (\x) \vb{\footnotesize $\x$};
                  }
                }
              \end{tikzpicture}
            </latex-image>
            <description>
              A labeled tree.  At the center of the drawing is the vertex e, adjacent to f (top right), g (bottom right), d (bottom left), c (middle left) and b (top left).  Vertex c is also adjacent to vertex a to its left.  Vertex f is adjacent to h (to its right) and i (to its down-right).
            </description>
          </image>
        </sidebyside>
        <p>
          If we designate vertex <m>f</m> as the root, then <m>e</m>, <m>h</m>, and <m>i</m> are the children of <m>f</m>, and are siblings of each other.  Among the other things we cay say are that <m>a</m> is a child of <m>c</m>, and a descendant of <m>f</m>.  The vertex <m>g</m> is a descendant of <m>f</m>, in fact, is a grandchild of <m>f</m>.  Vertices <m>g</m> and <m>d</m> are siblings, since they have the common parent <m>e</m>.
        </p>
        
        <p>
          Notice how this changes if we pick a different vertex for the root.  If <m>a</m> is the root, then its lone child is <m>c</m>, which also has only one child, namely <m>e</m>.  We would then have <m>f</m> the child of <m>e</m> (instead of the other way around), and <m>f</m> is the descendant of <m>a</m>, instead of the ancestor.  <m>f</m> and <m>g</m> are now siblings.
        </p>
      </statement>
    </example>
    
    
    
    <p>
      All of this flowery language helps us describe how to <em>navigate</em> through a tree.  Traversing a tree, visiting each vertex in some order, is a key step in many algorithms.  Even if the tree is not rooted, we can always form a rooted tree by picking any vertex as the root.  Here is an example of why doing so can be helpful.
    </p>
    
    <example>
      <statement>
        <p>
          Explain why every tree is a bipartite graph.
        </p>
      </statement>
      <solution>
        <p>
          To show that a graph is bipartite, we must divide the vertices into two sets, <m>A</m> and <m>B</m>, so that no two vertices in the same set are adjacent.  Here is an algorithm that does just this.
        </p>
        
        <p>
          Designate any vertex as the root.  Put this vertex in set <m>A</m>.  Now put all of the children of the root in set <m>B</m>.  None of these children are adjacent (they are siblings), so we are good so far.  Now put into <m>A</m> every child of every vertex in <m>B</m> (i.e., every grandchild of the root).  Keep going until all vertices have been assigned one of the sets, alternating between <m>A</m> and <m>B</m> every <q>generation.</q>  That is, a vertex is in set <m>B</m> if and only if it is the child of a vertex in set <m>A</m>.
        </p>
      </solution>
    </example>
    
    <p>
      <idx><h>breadth-first search</h></idx>
      <idx><h>search</h><h>breadth-first</h></idx>
      The key to how we partitioned the tree in the example was to know which vertex to assign to a set next.  We chose to visit all vertices in the same generation before any vertices of the next generation.  This is usually called a <term>breadth-first search</term> (we say <q>search</q> because you often traverse a tree looking for vertices with certain properties).  
    </p>
    
    <p>
      <idx><h>depth-first search</h></idx>
      <idx><h>search</h><h>depth-first</h></idx>
      In contrast, we could also have partitioned the tree in a different order.  Start with the root; put it in <m>A</m>.  Then look for one child of the root to put in <m>B</m>.  Then find a child of that vertex, into <m>A</m>, and then find its child, into <m>B</m>, and so on.  When you get to a vertex with no children, retreat to its parent, and see if the parent has any other children.  So we travel as far from the root as fast as possible, then backtrack until we can move forward again.  This is called <term>depth-first search</term>.
    </p>
    
    <p>
      These algorithmic explanations can serve as a proof that every tree is bipartite, although care needs to be spent to prove that the algorithms are <em>correct</em>.  Another approach to prove that all trees are bipartite, using induction, is requested in the exercises.
    </p>
  </subsection>
  <reading-questions xml:id="rqs-gt-trees">
    <exercise label="rq-gt-tree-facts">
      <statement>
        <p>
          Suppose <m>T</m> is a tree with 10 vertices.  Which of the following statements must be true about <m>T</m>?  Select all that apply.
        </p>
      </statement>
      <choices randomize="yes" multiple-correct="yes">
        <choice correct="yes">
          <statement>
            <p>
              <m>T</m> has a unique path between every pair of vertices.
            </p>
          </statement>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              If you removed any edge from <m>T</m>, the resulting graph would be disconnected.
            </p>
          </statement>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              If you added any edge between two vertices in <m>T</m> (that were not already adjacent), the resulting graph would have a cycle.
            </p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p>
              <m>T</m> has exactly two vertices of degree one.
            </p>
          </statement>
        </choice>
      </choices>
    </exercise>

    <exercise label="rs-rq-gt-trees-edgecount">
        <statement>
          <p>
            If a tree has 20 vertices, how many edges does it have?
          </p>
          <p component="interactive">
            Number of edges: <var width="5"/>
          </p>
        </statement>
        <setup>
          <var>
            <condition number="19">
              <feedback>
                <p>
                  Right.  The number of edges in a tree is always one less than the number of vertices.
                </p>
              </feedback>
            </condition>
            <condition string=".*">
            <feedback>
              <p>
                Try again. 
              </p>
            </feedback>
          </condition>
          </var>
          </setup>
    </exercise>

    <exercise label="rq-gt-trees-q">
      <statement>
        <p> 
          What questions do you have after reading this section? Write at least one question about the content of this section that you are curious about.
        </p>
      </statement>
      <response />
    </exercise>
  </reading-questions>


  <xi:include href="practice/gt-trees.ptx"/>
  <xi:include href="exercises/gt-trees.ptx"/>
</section>

