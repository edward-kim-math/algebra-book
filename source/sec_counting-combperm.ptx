<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_counting-combperm">
	<title>Combinations and Permutations</title>
	<idx><h>combination</h>
	</idx>
	<idx><h>permutation</h>
	</idx>
	<objectives>
		<introduction>
			<p>
				After completing this section, you should be able to do the following.
			</p>
		</introduction>
		<ol>
			<li>
				<p>
					Correctly decide between using a combination or a permutation when solving a counting problem.
				</p>
			</li>

			<li>
				<p>
					Apply the correct combination or permutation to solve a counting problem.
				</p>
			</li> 
			<li>
				<p>
					Explain the relationship between combinations and permutations and why their formulas are correct.
				</p>
			</li>
		</ol>
	</objectives>
	<subsection>
		<title>Section Preview</title>
		
		<investigation>
			<statement>
				<p>
					You have decided to decorate your magic wand with bands of different colored tape.  You have 10 different colors to choose from, and you will use five of them to create five different stripes of color.  How many different wand designs are possible?
				</p>
			</statement>
</investigation>

<p>
	The <xref ref="principle-product" text="custom">product principle</xref> gives us a way to count the number of outcomes when each outcome is made by combining smaller pieces.  A typical example of this is to count the number of three-letter <q>words</q>; each outcome (word) we count is made up of a combination of three smaller pieces (letters).  Since there are 26 choices for each smaller piece, there are <m>26\cdot 26\cdot 26 = 26^3</m> possible outcomes.
</p>

<p>
	The product principle does not require that each piece that is being combined be chosen from a set of the same size.  We will use this observation to create a standard way to count outcomes when the pieces are chosen from a fixed set, but without allowing for any piece to be used more than once.  For example, we can ask how many 3-letter words there are that contain distinct letters.  
</p>

<p>
	These arrangements are called <term>permutations</term>.  We will also consider another counting technique where we count <term>combinations</term>, which is related but counts something different.  We will explore how these two counting techniques are related and how they can be used to solve a wide range of counting problems.
</p>

<worksheet xml:id="PA-counting-combperm">
	<title>Preview Activity</title>
	
	
	<introduction>
		<p>
			You have a bunch of poker chips that come in five different colors: red, blue, green, purple, and yellow.
		</p>
	</introduction>
	<exercise label="pa-counting-combperm-1">
		<webwork>
			<pg-code>
				loadMacros("parserAutoStrings.pl");
				AutoStrings();
				$chiplist1 = List(String(RB), String(RG), String(RY), String(RP), String(RR), String(BB), String(BG), String(BY), String(BP), String(BR));
			</pg-code>
			<introduction>
				<p>
					How many two-chip stacks are possible where the bottom chip must be red or blue?
				</p>
			</introduction>
			<task>
				<statement>
					<p>
						List all possible two-chip stacks.  For example, the stack with a red chip on bottom and a green chip on top can be listed as <q>RG</q>.
					</p>
					<p>
						<var name="$chiplist1" width="50"/>
					</p>

				</statement>
			</task>
			<task>
				<statement>
										<p>
						Using the additive principle, we notice that there are <var name="5" width="5"/> stacks that have blue on the bottom, another <var name="5" width="5"/> stacks that have red on the bottom, so there are a total of <var name="10" width="10"/> possible stacks.
					</p>
				</statement>
			</task>
			<task>
				<statement>
					<p>
						If we use the multiplicative principle, then there are <var name="2" width="5"/> choices for the bottom chip and <var name="5" width="5"/> choices for the top chip, so there are <var name="10" width="10"/> possible stacks.
					</p>
				</statement>
			</task>
		</webwork>
	</exercise>

	<exercise label="pa-counting-combperm-2">
		<webwork>
			<pg-code>
				
			</pg-code>
			
			<statement>
				<p>
				How many different three-chip stacks are possible if the bottom chip must be red or blue and the top chip must be green, purple, or yellow?
				</p>
				<p>
					<var name="30" width="50"/>
				</p>
			</statement>
			<hint>
				<p>
					How does this question relate to the previous question?  Is there something we can do to the 10 two-chip stacks to make them into three-chip stacks?
				</p>
			</hint>
		</webwork>
	</exercise>
	<exercise label="pa-counting-combperm-3">
		<webwork>
			<pg-code>
				
			</pg-code>

			<introduction>
				<p>
				How many different three-chip stacks are there in which no color is repeated?
				</p>
			</introduction>
			<task>
				<statement>
					<p>
						First, how many three-chip stacks with no repeated color have blue on the bottom and green in the middle?
					</p>
					<p>
						
						<var name="3" width="5"/>
					</p>
					<p>
						And how many three-chip stacks with no repeated color have blue on the bottom and yellow in the middle?
					</p>
					<p>
						<var name="3" width="5"/>
					</p>
					<p>
						In fact, for any stack with blue on the bottom and some other color in the middle, there are <var name="3" width="5"/> possible stacks.
					</p>
				</statement>
			</task>

			<task>
				<statement>
					<p>
						If we insist that blue is on the bottom, how many choices do we have for the color of the middle chip?
					</p>
					<p>
						<var name="4" width="5"/>
					</p>
					<p>
						Combining this with the answer from the previous question, how many three-chip stacks with no repeated color have blue on the bottom?
					</p>
					<p>
						
						<var name="12" width="5"/>
					</p>
				</statement>
			</task>
			<task>
				<statement>
					<p>
						Of course, we didn't need to start with blue on the bottom.	How many choices do we have for the color of the bottom chip?
					</p>
					<p>
						<var name="5" width="5"/>
					</p>
					<p>
						So how many three-chip stacks with no repeated color are there?
					</p>
					<p>
						<var name="60" width="5"/>
					</p>
				</statement>
			</task>
			<task>
				<statement>
					<p>
						How many four-chip sticks are there with no repeated color?
					</p>
					<p>
						<var name="120" width="5"/>
					</p>
				</statement>
			</task>
		</webwork>
	</exercise>

  <exercise label="pa-counting-combperm-4">
		<webwork>
			<pg-code>
				
			</pg-code>
		
			<introduction>
				<p>
				Suppose you wanted to take three chips with different colors and put them in your pocket.
				</p>
			</introduction>

			<task>
				<statement>
					<p>
						One outcome is taking the blue, green, and purple chips.  How many of the three-chip stacks of different color chips correspond to this single pocketful?
					</p>
					<p>
						<var name="6" width="5"/>
					</p>
				</statement>
				<hint>
					<p>
						With these three colors, how many choices do you have for which chip is on the bottom?  In the middle? On top?
					</p>
				</hint>
			</task>
			<task>
				<statement>
					<p>
						How many different stacks of chips would result in picking up the red, yellow, and green chips?
					</p>
					<p>
						
						<var name="6" width="5"/>
					</p>
				</statement>
			</task>
			<task>
				<statement>
					<p>
						So of the <var name="60" width="5"/> possible three-chip stacks, we can group the chips into groups of size <var name="6" width="5"/>, where each group corresponds to the same pocketful of chips.	How many different pocketfuls of chips are there?
					</p>
					<p>
						<var name="10" width="5"/>
					</p>
				</statement>
			</task>
			<task>
				<statement>
					<p>
						How many different pocketfuls of chips are there if you take four chips?
					</p>
					<p>
						<var name="5" width="5"/>
					</p>
				</statement>
			</task>
		</webwork>
	</exercise>
</worksheet>
</subsection>

<subsection xml:id="subsec-counting-sequences">
	<title>Counting Sequences</title>
	
	<p>
		<idx>
		permutation</idx> A <term>permutation</term> is a (possible) rearrangement of objects.
		For example,
		there are 6 permutations of the letters <em>a, b, c</em>:
		<me>
			abc, ~~ acb, ~~ bac, ~~bca, ~~ cab, ~~ cba
		</me>.
		In terms of our discrete structures, each permutation is really a <em>sequence</em> or <em>tuple</em> of a fixed length.  
	</p>

	<p>
		We know that we have
		them all listed above <mdash />there are 3 choices for which letter we put first, then 2 choices
		for which letter comes next, which leaves only 1 choice for the last letter.
		The multiplicative
		principle says we multiply <m>3\cdot 2 \cdot 1</m>.
	</p>

	<example>
		<statement>
			<p>
				How many sequences (permutations) are there of the
				letters <em>a, b, c, d, e, f</em>?
			</p>
		</statement>

		<solution>
			<p>
				We do NOT want to try to list all of the length 6 sequences of these letters.
				However, if we did, we would need to pick a letter to write down first.
				There are
				6 choices for that letter.
				For each choice of the first letter, there are 5 choices for the
				second letter (we cannot repeat the first letter; we are rearranging letters and only have
				one of each), and for each of those, there are 4 choices for the third, 3 choices for the
				fourth, 2 choices for the fifth, and finally only 1 choice for the last letter.
				So there are <m>6
				\cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1 = 720</m> permutations of the 6 letters.
			</p>
		</solution>
	</example>

	<p>
		A piece of notation is helpful here: <m>n!</m>, read <q><m>n</m> factorial</q>, <idx><h>factorial</h>
		</idx>
		is the product of all positive integers less than or equal to <m>n</m> (for reasons of convenience,
		we also define 0! to be 1).
		So the number of permutations of 6 letters, as seen in the previous
		example is <m>6! = 6\cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1</m>.
		This generalizes:
	</p>

	<theorem>
		<title>Permutations of <m>n</m> Elements</title>
		<idx><h>permutation</h><h sortby="of n elements">of <m>n</m> elements</h>
		</idx>

		<p>
			There are <m>n! = n\cdot (n-1)\cdot (n-2)\cdot \cdots \cdot 2\cdot 1</m> permutations of <m>n</m> (distinct) elements.
		</p>
	</theorem>

	<example xml:id="example-counting-functions-bijective">
		<title>Counting
		Bijective Functions</title>
		<idx><h>bijection</h><h>counting</h>
		</idx>
		<idx><h>permutation</h><h>to count
		functions</h>
		</idx>

		<statement>
			<p>
				How many functions <m>f:\{1,2,\ldots,8\} \to \{1,2,\ldots, 8\}</m> are <em>
				bijective</em>?
			</p>
		</statement>

		<solution>
			<p>
				Remember what it means for a function to be bijective:
				Each element in the codomain must be the image of exactly one element of the domain.
				Using
				two-line notation, we could write one of these bijections as
				<me>
					f = \twoline{1 \amp 2 \amp 3 \amp 4 \amp 5 \amp 6 \amp 7 \amp 8} {3 \amp 1 \amp 5 \amp 8
					\amp 7 \amp 6 \amp 2 \amp 4}
				</me>.
				What we are really doing is just rearranging the elements of the codomain, so we are
				creating a permutation of 8 elements.
				In fact, <q>permutation</q> is another term used to
				describe bijective functions from a finite set to itself.
			</p>

			<p>
				If you believe this, then you
				see the answer must be <m>8! = 8 \cdot 7 \cdot\cdots\cdot 1 = 40320</m>.
				You can see this
				directly as well: For each element of the domain, we must pick a distinct element of the
				codomain to map to.
				There are 8 choices for where to send 1, then 7 choices for where to
				send 2, and so on.
				We multiply using the multiplicative principle.
			</p>
		</solution>
	</example>

	<p>
		Sometimes we do not want to permute all of the letters/numbers/elements we are given.
	</p>

	<example>
		<idx><h>
		permutation</h><h>to count words</h>
		</idx>
		<idx><h>word (counting)</h>
		</idx>

		<statement>
			<p>
				How many four-letter <q>
				words</q> can you make from the letters <em>a</em> through <em>g</em>, with no repeated letters?
			</p>
		</statement>

		<solution>
			<p>
				This is just like the problem of permuting four letters, only now we have more choices for each
				letter.
				For the first letter, there are 7 choices.
				For each of those, there are 6 choices
				for the second letter.
				Then there are 5 choices for the third letter and 4 choices for the
				last letter.
				The total number of words is <m>7\cdot 6\cdot 5 \cdot 4 = 840</m>.
			</p>

			<p>
				This is not <m>7!</m> because we never multiplied by 3, 2, or 1.
				We could write it using <m>7!</m> though, if we cancel the 3, 2, and 1.
				Thus we could write the answer as <me>\frac{7!}{3!} = \frac{7\cdot 6\cdot 5\cdot 4 \cdot \cancel{3} \cdot \cancel{2} \cdot \cancel{1}}{\cancel{3} \cdot \cancel{2} \cdot \cancel{1}} = 7 \cdot 6 \cdot 5 \cdot 4</me>.
			</p>
		</solution>
	</example>

	<p>
		<idx><h>permutation</h><h sortby="of k elements chosen from
		m">of <m>k</m>
		elements chosen from <m>n</m></h><see><m>k</m>-permutation of <m>n</m> elements</see>
		</idx>
		<idx><h sortby="k-permutation of n elements"><m>k</m>-permutation
		of <m>n</m> elements</h>
		</idx>
		In general, we can ask how many permutations exist of <m>k</m>
		objects choosing those objects from a larger collection of <m>n</m> objects.
		(In the example above, <m>k
		= 4</m>, and <m>n = 7</m>.) We write this number <m>P(n,k)</m> and sometimes call it a <term><m>k</m>-permutation
		of <m>n</m> elements</term>.
	</p>

	<p>
		From the example above, we see that to compute <m>P(n,k)</m> we must
		apply the multiplicative principle to <m>k</m> numbers, starting with <m>n</m> and counting backwards.
		For example
		<me>
			P(10, 4) = 10\cdot 9 \cdot 8 \cdot 7
		</me>.
	</p>

	<p>
		Notice that <m>P(10,4)</m>
		starts out looking like <m>10!</m>, but we stop after 7.
		We can formally account for this <q>stopping</q>
		by dividing away the part of the factorial we do not want:
		<me>
			P(10,4) = \frac{10\cdot 9 \cdot 8 \cdot 7 \cdot 6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1}{6
			\cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1} = \frac{10!}{6!}
		</me>.
	</p>

	<p>
		Careful: The factorial in the denominator is not <m>4!</m> but rather <m>(10-4)!</m>.
	</p>

	<definition>
		<title><m>
		k</m>-permutations of <m>n</m> elements</title>
		<idx><h sortby="k-permutation of n elements"><m>k</m>-permutation of <m>n</m> elements</h>
		</idx>
		<idx><h>
		permutation</h>
		</idx>
		<statement>
		<p>
			<m>P(n,k)</m> is the number of <term><m>k</m>-permutations of <m>n</m> elements</term>,
			the number of ways to <em>arrange</em>
			<m>k</m> objects chosen from <m>n</m> distinct objects.
		</p>
		</statement>
	</definition>
	
	<theorem xml:id="thm-k-permutation">
		<statement>
			<p>
				The number of <m>k</m>-permutations of <m>n</m> elements is
				<me>
					P(n,k) = \frac{n!}{(n-k)!} = n(n-1)(n-2)\cdots (n-(k-1))
				</me>.
			</p>
		</statement>
	</theorem>
	
	<p>
		Note that when <m>n = k</m>, we have <m>P(n,n) = \frac{n!}{(n-n)!} = n!</m> (since we defined <m>0!</m>
		to be 1).
		This makes sense <mdash />we already know <m>n!</m> gives the number of permutations of
		all <m>n</m> objects.
	</p>

	<example xml:id="example-counting-functions-injective">
		<title>Counting injective functions</title>
		<idx><h>injection</h><h>counting</h>
		</idx>

		<statement>
			<p>
				How many functions <m>f:\{1,2,3\} \to \{1,2,3,4,5,6,7,8\}</m> are <em>injective</em>?
			</p>
		</statement>

		<solution>
			<p>
				Note that it doesn't make sense to ask for the number of <em>bijections</em> here, as there are
				none (because the codomain is larger than the domain, there are no surjections).
				But for a
				function to be injective, we just can't use an element of the codomain more than once.
			</p>

			<p>
				We need to pick an element from the codomain to be the image of 1.
				There are 8 choices.
				Then
				we need to pick one of the remaining 7 elements to be the image of 2.
				Finally, one of the
				remaining 6 elements must be the image of 3.
				So the total number of functions is <m>8\cdot 7
				\cdot 6 = P(8,3)</m>.
			</p>

			<p>
				What this demonstrates in general is that the number of
				injections <m>f:A \to B</m>, where <m>\card{A} = k</m> and <m>\card{B} = n</m>, is <m>P(n,k)</m>.
			</p>
		</solution>
	</example>
</subsection>


<subsection xml:id="subsec-combinations">
	<title>Counting Sets</title>

	<p>
		Let's consider another way to count sequences: First count sets, then arrange them.
	</p>

	<example>
		<statement>
			<p>
				Your basketball team has 12 players.  Assuming everyone can play every position, how many ways can you choose 5 players to be on the court at the same time?
			</p>
		</statement>
		<solution>
			<p>
				This question is actually too vague.  Do we mean how many ways can we select five players?  Or do we mean how many ways can we pick five players to fill the five positions?<fn>I'm told the five positions are called point guard, shooting guard, small forward, power forward, and center.  Who knew?</fn>  Let's answer both of these questions.
			</p>
			<p>
				First, if we just want to select five out of the 12 players, that is just like picking five out of 12 pizza toppings (although less delicious).  We know that there are <m>\binom{12}{5}</m> ways to do this, and from <xref ref="fig-pascal-large" text="custom">Pascal's triangle</xref> we know that this is 792.
			</p>
			<p>
				On the other hand, if we wanted to pick five players for the five different positions,... well, we could start by picking one of the 792 different <em>sets</em> of five players, and then permute them into the five positions.  Of the five players on the court, we pick one of the five to be the point guard, then one of the remaining four to be the shooting guard, and so on.  This gives us <m>5\cdot 4\cdot 3\cdot 2\cdot 1 = 5!</m> ways to arrange the players.  So the total number of ways to pick five players for the five positions is <me>\binom{12}{5}\cdot 5! = 792\cdot 120 = 95,040</me>.
			</p>
			<p>
				Wait. We could have found that number directly.  Without choosing the five players first, we have 12 choices for the point guard, then 11 choices for the shooting guard, and so on.  So the total number of ways to pick five players for the five positions is simply the permutation <me>P(12,5) = 12\cdot 11\cdot 10\cdot 9\cdot 8 = 95,040</me>.  Thank goodness that is the same answer!
			</p>
		</solution>
	</example>

	<p>
		The example above illustrates a second way to compute the number of <m>k</m>-permutations of <m>n</m> elements: First select which <m>k</m> elements will be in the permutation, then count how many ways there are to arrange them. Once you have selected the set of <m>k</m> objects, we know there are <m>k!</m> ways to arrange (permute) them. But how do you select <m>k</m> objects from the <m>n</m>? You have <m>n</m> objects, and you need to <em>choose</em> <m>k</m> of them. You can do that in <m>\binom{n}{k}</m> ways.  
	</p>
	
	<p>
		Using the multiplicative principle to combine the two steps, we get another formula for <m>P(n,k)</m>:
		<me>
			P(n,k) = \binom{n }{ k}\cdot k!
		</me>.
	</p>

	<p>
		This is HUGE!
	</p>
	
	<p>
		We have a closed formula
		for <m>P(n,k)</m> already. We can substitute that in:
		<me>
			\frac{n!}{(n-k)!} = \binom{n}{k} \cdot k!
		</me>.
	</p>

	<p>
		If we then divide both sides
		by <m>k!</m>, we get a closed formula for <m>\binom{n}{k}</m>.
	</p>

	<theorem>
		<title>Closed Formula for <m>\binom{n}{k}</m></title>
		<idx><h>binomial
		coefficient</h><h>closed formula for</h>
		</idx>
		<idx><h>combination</h><h>closed formula for</h>
		</idx>

		<p>
			<me>
			\binom{n}{k} = \frac{n!}{(n-k)!k!} = \frac{n(n-1)(n-2)\cdots(n-(k-1))}{k(k-1)(k-2)\cdots 1}
			</me>.
		</p>
	</theorem>

	<p>
		<idx><h>combination</h><h>vs. permutation</h>
		</idx>
		<idx><h>permutation</h><h>vs.
		combination</h>
		</idx> 
		Another name for the collections of things that <m>\binom{n}{k}</m> counts is <term>combinations</term>.  We say that <m>\binom{n}{k}</m> counts the number of <m>k</m>-element combinations of <m>n</m> elements.  Sometimes we even use the notation <m>C(n,k)</m> instead of <m>\binom{n}{k}</m>.  
	</p>
	
	<p>
		Clearly combinations and permutations are very closely related. The formulas to count each are very similar; there is just an extra <m>k!</m> in the denominator of <m>\binom{n}{k}</m>.  That extra <m>k!</m> accounts for the fact that <m>\binom{n}{k}</m> does not distinguish between the different orders that the <m>k</m> objects can appear in.  We are just selecting (or choosing) the <m>k</m> objects, not arranging them.  
	</p>

	<example>
		<idx>
		<h>
		combination</h>
		<h>vs. permutation</h>
		</idx>
		<idx>
		<h>permutation</h>
		<h>vs. combination</h>
		</idx>

		<statement>
			<p>
				You decide to have a dinner party.
				Even though you are incredibly popular and have 14 different friends,
				you only have enough chairs to invite 6 of them.
			</p>

			<p>
				<ol>
					<li>
						<p>
							How many choices do you have for which 6 friends to invite?
						</p>
					</li>

					<li>
						<p>
							What if you need to decide not only which friends to invite but also where to seat them along your long table? How many choices do you have then?
						</p>
					</li>
				</ol>
			</p>
		</statement>

		<solution>
			<p>
				<ol>
					<li>
						<p>
							You must simply choose 6 friends from a group of 14. This can be done in <m>\binom{14}{6}</m> ways. We can find this number either by using Pascal's triangle or the closed formula: <m>\frac{14!}{8!\cdot 6!} = 3003</m>.
						</p>
					</li>

					<li>
						<p>
							Here you must count all the ways you can permute 6 friends chosen from a group of 14. So the answer is <m>P(14, 6)</m>, which can be calculated as <m>\frac{14!}{8!} = 2162160</m>.
						</p>

						<p>
							Notice that we can think of this counting problem as a question about counting functions: How many injective functions are there from your set of 6 chairs to your set of 14 friends (the functions are injective because you can't have a single chair go to two of your friends).
						</p>
					</li>
				</ol>
			</p>

			<p>
				How are these numbers related? Notice that <m>P(14,6)</m> is <em>much</em> larger than <m>\binom{14}{6}</m>.
				This makes sense. <m>\binom{14}{6}</m> picks 6 friends, but <m>P(14,6)</m> arranges the 6 friends as well as picks them. In fact, we can say exactly how much larger <m>P(14,6)</m> is. In both counting problems we choose 6 out of 14 friends. For the first one, we stop there, at 3003 ways. But for the second counting problem, each of those 3003 choices of 6 friends can be arranged in exactly <m>6!</m> ways. So now we have <m>3003\cdot 6!</m> choices and that is exactly <m>2162160</m>.
			</p>

			<p>
				Alternatively, look at the first problem another way. We want to select 6 out of 14 friends, but we do not care about the order they are selected in. To select 6 out of 14 friends, we might try this: <me> 14 \cdot 13 \cdot 12 \cdot 11 \cdot 10 \cdot 9 </me>.
			</p>

			<p>
				This is a reasonable guess, since we have 14 choices for the first guest, then 13 for the second, and so on. But the guess is wrong (in fact, that product is exactly <m>2162160 = P(14,6)</m>). It distinguishes between the different orders in which we could invite the guests. To correct for this, we could divide by the number of different arrangements of the 6 guests (so that all of these would count as just one outcome). There are precisely <m>6!</m> ways to arrange 6 guests, so the correct answer to the first question is <me> \frac{14 \cdot 13 \cdot 12 \cdot 11\cdot 10 \cdot 9}{6!} </me>.
			</p>

			<p>
				Note that another way to write this is
				<me>
					\frac{14!}{8!\cdot 6!}
				</me>.
				which is what we had originally.
			</p>
		</solution>
	</example>
	
	<p>
		Perhaps <q>combination</q> is a misleading label.  We don't mean it like a combination lock (where the order would definitely matter).  Perhaps a better metaphor is a combination of flavors <mdash /> you just need to decide which flavors to combine, not the order in which to combine them.
	</p>

	<p>
		So how do you know when to use a combination and when to use a permutation?  
	</p>

<paragraphs>
	<title>Does order matter?</title>
	<p>
		Almost every source you look at about combinations and permutations will make some variation of the following claim.
	</p>

	<blockquote>
		<p>
			Use a permutation when the order matters, and use a combination when the order does not matter.
		</p>
	</blockquote>

	<p>
		What does this even mean? And why is it an absolutely awful way to distinguish between the two counting techniques?  Let's explore with an example.
	</p>

	<p>
		Suppose you are proposing a new lottery game.  In the game, five numbered balls will be randomly shot out of the machine that holds balls numbered 1 to 50.  If a player correctly picks the five numbers that come out, they win the jackpot.
	</p>

	<p>
		Of course, we want to know the odds of winning this lottery game, which requires us to know how many different outcomes there are.  The balls fly out of the machine randomly, so one result might be to get the balls
		<me>
			26, 5, 42, 17, 33
		</me>.
		If you were holding the ticket that had numbers <m>5, 17, 26, 33, 47</m>, do you expect to have won?  Most lottery games would say you have, since you have the same numbers, just in a different order.  
	</p>

	<p>
		In this sense, the <em>order</em> of the numbers does not matter.  A better way to say this is that <em>any</em> order of the same numbers is considered the same outcome, and is counted only once.  So really, we are counting the <em>sets</em> of five numbers, not the <em>sequences</em> of five numbers.  Each outcome is a combination, so the number of outcomes should be <m>C(52,5) = \binom{52}{5}</m>.
	</p>

	<p>
		On the other hand, if we must pick the numbers in the same order they come out of the machine, then we are really matching a sequence of numbers to a sequence of numbers.  The number of sequences is <m>P(52,5)</m>.  In this case, we would say that the order matters.
	</p>

	<p>
		Okay, so far so good.  But what about the following example? 
	</p>
	
	<example>
		<statement>
			<p>
				How many three letter <q>words</q> are there in which 
				<ol>
					<li>
						<p>
							the letters appear in alphabetical order?  
						</p>
					</li>
					<li>
						<p>
							the letters in the word can come in any order?
						</p>
					</li>
				</ol>
				
			</p>
		</statement>
		<solution>
			<p>
				Does <q>order matter</q> for the first question?  In some sense, absolutely!  We only want to count words where the letters are in the correct order.  But from the standard combination/permutation sense of order mattering, it does not.  
			</p>

			<p>
				Much better would be to ask ourselves whether we should represent each outcome as a set of letters or a sequence of letters.  It is true that words are a sequence of letters, but are we counting all possible sequences?  Nope, just one sequence for each set of letters.  Ah, yes, set of letters.  Each outcome corresponds exactly to one set of three letters.  We are counting sets, so we count combinations.  The number of outcomes is <m>C(26,3) = \binom{26}{3}</m>.
			</p>

			<p>
				For the second question, it might look like the order shouldn't matter.  Well, it doesn't matter to the machine spitting out the letters, but it would matter if we were trying to match the letters.  No, let's think about it like this: Are we counting every possible sequence of letters?  Yes!  So these are permutations, and the number of outcomes is <m>P(26,3)</m>.
			</p>
		</solution>
	</example>

	<p>
		Another deceptive use of order appears when counting bit strings.  Recall that an <m>n</m>-bit string of weight <m>k</m> is a string of <m>n</m> bits (0s and 1s) in which <m>k</m> of the bits are 1s.  For example, the 4-bit strings of weight 2 are
		<me>
			1100, ~~ 1010, ~~ 1001, ~~ 0110, ~~ 0101, ~~ 0011
		</me>.
		Does order matter for bit strings? Of course it does!  It is the only thing that matters.  All of the strings above contain exactly the same number of 0s and 1s; they are only distinguished by the order of the bits.  
	</p>

	<p>
		And yet, the number of <m>n</m>-bit strings of weight <m>k</m> is <m>\binom{n}{k}</m> and NOT a permutation.  What is going on here?
	</p>

	<p>
		Nothing is broken; we are just not thinking about the right objects about which to consider the order.  When we <em>choose</em> <m>k</m> out of <m>n</m> things for a bit string, it is the <em>positions</em> we are choosing (to fill with 1s, say).  It does not matter in what order we choose those positions, just what set of positions we choose.  That is, the bit string 1001 is the result of choosing positions 1 and 4 to put 1s into.  If we chose positions 4 and then 1, we would get the same bit string.	
	</p>

	<p>
		To summarize, the question of whether order matters can lead us astray when deciding between a combination and a permutation.  Instead, we should decide whether the outcomes we are counting are sets or sequences.  If we are counting sets, think combination.  If we are counting sequences, think permutation.
	</p>
</paragraphs>

</subsection>

<subsection xml:id="subsec-quotient-principle">
	<title>The Quotient Principle</title>
	<p>
		We have two ways to write the numerical relationship between the numbers of combinations and permutations.  Using the product principle, we have,
		<me>
			P(n,k) = \binom{n}{k} \cdot k!
		</me>
		which can be rewritten as,
		<me>
			\binom{n}{k} = \frac{P(n,k)}{k!}
		</me>.
		This second formula suggests that there might be a <em>quotient principle</em> that we could use to justify it.
	</p>

	<p>
		Let's think about what division means.  One way to think of the division problem <m>24 \div 6 = 4</m>, for example, is saying that if you have 24 things that you divide into groups of size 6, the number of groups will be 4.<fn>The other way to interpret this statement is that if you divide 24 things into six groups, then each group will have size 4, but this is less useful for what we will do.</fn>
	</p>

	<p>
		Now let's look at all the 3-permutations of a set of size 4: For example, all the ways to make 3-letter words using the letters <m>a, b, c, d</m>.  We know the number of such words is <m>P(4,3) = 4\cdot 3 \cdot 2 = 24</m>.  It is helpful to actually list all these out.
	</p>

	<tabular>
		<row>
			<cell><m>abc</m></cell><cell><m>acb</m></cell><cell><m>bac</m></cell><cell><m>bca</m></cell><cell><m>cab</m></cell><cell><m>cba</m></cell>
		</row>
		<row>
			<cell><m>abd</m></cell><cell><m>adb</m></cell><cell><m>bad</m></cell><cell><m>bda</m></cell><cell><m>dab</m></cell><cell><m>dba</m></cell>
		</row>
		<row>
			<cell><m>acd</m></cell><cell><m>adc</m></cell><cell><m>cad</m></cell><cell><m>cda</m></cell><cell><m>dac</m></cell><cell><m>dca</m></cell>
		</row>
		<row>
			<cell><m>bcd</m></cell><cell><m>bdc</m></cell><cell><m>cbd</m></cell><cell><m>cdb</m></cell><cell><m>dbc</m></cell><cell><m>dcb</m></cell>
		</row>
	</tabular>

	<p>
		Look at the first row.  What do all these permutations have in common?  These are exactly the permutations that use the letters <m>a, b, c</m> in different orders.  It is not surprising that there are 6 of these, since the number of ways to arrange three elements is <m>3! = 6</m>.	Similarly, the second row has 6 permutations that use the letters <m>a, b, d</m> in different orders, and so on. 
	</p>

	<p>
		The point is, if we wanted to just count how many <em>sets</em> of three of the four letters we have, each set corresponds exactly to one of the rows in the table. There are 24 elements in the table, and 6 elements in each row, so there must be <m>24 \div 6 = 4</m> rows.  And of course, we are not surprised because <m>\binom{4}{3} = 4</m>.
	</p>

	<p>
		A more mathematically rigorous explanation for this phenomenon is to use the language of equivalence relations and partitions from <xref ref="sec_gt-relations"/>.  We start with permutations, and then we define an <em>equivalence relation</em> on the permutations by saying two permutations are equivalent provided they contain exactly the same elements.  From the equivalence relation we get a <em>partition</em> of our set of permutations into <em>equivalence classes</em>.  The combinations we want to count are precisely the equivalence classes.  Since each equivalence class has the same size, we can find the number of classes by dividing the number of permutations by the size of each class.
	</p>

	<p>
		This sort of quotient principle is also useful for solving questions where the answer isn't obviously either a permutation or combination.  
	</p>

	<example>
		<statement>
			<p>
				You have decided to decorate your magic wand with bands of different colored tape.  You have 10 different colors to choose from, and you will use five of them to create five different stripes of color.  How many different wand designs are possible?
			</p>
		</statement>
		<solution>
			<p>
				Our first attempt to solve this problem might be to think of each outcome we are trying to count as a 5-permutation of 10 colors.  That would give us an answer of <m>P(10,5) = 10\cdot 9\cdot 8\cdot 7\cdot 6 = 30,240</m>.  So why is this not correct?  Let's start making a list  of the outcomes that are possible.
				<ol>
					<li>
						<p>
							Red, blue, green, yellow, orange.
						</p>
					</li>
					<li>
						<p>
							Red, blue, green, yellow, purple.
						</p>
					</li>
					<li>
						<p>
							Blue, green, red, yellow, orange.
						</p>
					</li>
					<li>
						<p>
							Orange, yellow, green, blue, red.
						</p>
					</li>
					<li>
						<p>
							etc.
						</p>
					</li>
				</ol>
				While starting this list, perhaps we asked ourselves whether red, red, blue, blue, red should be on the list, and recognized that it shouldn't.  Another thing we might have considered is whether items 1 and 3 are really different.  They are, since one wand has red as an outside color while the other one does not.  
			</p>

			<p>
				But what about items 1 and 4?  They have the same five colors, but in a different order.  However, if you were to spin the magic wand around, like magicians are apt to do, you could easily end up with wand 4 from wand 1.  Aha!  We see that each wand is counted exactly twice in our list of permutations: two permutations are equivalent if they are just the <em>reverse</em> of each other.	
			</p>

			<p>
				Since we can group the permutations into groups of size 2, and each group corresponds to a single wand, we see that the correct answer is,
				<me>
					\frac{P(10,5)}{2} = \frac{10\cdot 9\cdot 8\cdot 7\cdot 6}{2} = 15,120
				</me>.
				Tada!
			</p>
		</solution>
	</example>
</subsection>

	<reading-questions xml:id="rqs-counting-combperm">
	<exercise label="rq-counting-combperm-2">
		<statement>
			<p>
				True or false: The number of sequences of two distinct digits from 0-9 is <em>twice</em> the number of sets of two distinct digits from 0-9.
				Briefly explain.
			</p>
		</statement>
		<response />
	</exercise>

	<exercise label="rq-counting-combperm-3">
		<statement>
			<p>
				True or false: The number of sequences of three distinct digits from 0-9 is <em>3 times</em> the number of sets of three distinct digits from 0-9.
				Briefly explain.
			</p>
		</statement>
		<response />
	</exercise>

	<exercise label="rq-counting-combperm-q" component="runestone">
		<statement>
			<p>
				What questions do you have after reading this section? Write at least one question about
				the content of this section that you are curious about.
			</p>
		</statement>
		<response />
	</exercise>
	</reading-questions>
	<xi:include href="practice/counting-combperm.ptx"/>
	<xi:include href="exercises/counting-combperm.ptx"/>
</section>
